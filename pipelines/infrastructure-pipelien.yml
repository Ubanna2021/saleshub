

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - template: variables.yml

stages:
- stage: SetupBackend
  displayName: "Backend Setup"
  jobs:
  - job: backEnd 
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Check if resource group for he state file exist
          echo "Checking if resource group for the state file exist"
          if ! az group show --name $(resourceGroupName) --output none 2>dev/null; then
            echo "Creating the resource group $(resourceGroupName)"
            az group create --name $(resourceGroupName) --location $(location)
          else
            echo "resource Group $resourceGroupName already exist"
          fi

          # Check if storage account for state file alrewady exist
          echo "Checking if storage accountr already exist"
          checkStorageAccount=$(az storage account check-name --name $(storageAccountName) --query 'nameAvailable' -o tsv)
          if [checkStorageAccount == 'false']
          then 
            echo "The storage account $(storageAccountName) already exist"
          else 
            echo "Creating storage account $(storageAccountName)"
            az storage account create --name $(storageAccountName) --resource-group $(resourceGroupName) --location $(location) --sku $(storageSKU)
          fi 

          # Checkis terraform statefilr container exists 
          echo "Check if storage account container for state file exist"
          connection_string=$(az storage account show-connection-string --name $(storageAccountName) --query connectionString --output tsv)
          if az storage container list --connection-string $connection_string --query "[?name=='$(containerName)']" --output tsv | grep -q "$(containerName)"; then 
            echo " Container $containername already esist"
          else
            echo "Create storage account container for state file"
            az storage container create --name $(containerName) --connection-string $connection_string
          fi
    
  
- stage: DeployAgent
  displayName: "Deploy Azure Infrastructure"
  jobs:
  - job: DeployAKS
    displayName: "Deploy AKS cluster using Terraform"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      # Checkout the code repository containing Terraform configuration
      - checkout: self

      # Install Terraform
      - task: TerraformInstaller@1
        inputs:
          terraformVersion: 'latest'

      # Initialize Terraform
      - task: TerraformTaskV4@4
        inputs:
          wokingDirectory: $(System.DefaultWorkingDirectory)\saleshub\infrastructure
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: 'AzureDevopsCon1'
          backendAzureRmResourceGroupName: 'rgtest1'
          backendAzureRmStorageAccountName: 'strgtestdevopagent1'
          backendAzureRmContainerName: 'terraform01'
          backendAzureRmKey: 'terraform.tfstate'
        displayName: "Initialize Terraform"

      # Plan Terraform deployment
      - task: TerraformTaskV4@4
        inputs:
          provider: 'azurerm'
          command: 'plan'
          commandOptions: '-var-file $(varFile)'
          environmentServiceNameAzureRM: 'AzureDevopsCon1'
        displayName: "Plan Terraform"

      # Apply Terraform to create VM
      - task: TerraformTaskV4@4
        inputs:
          wokingDirectory: $(System.DefaultWorkingDirectory)\saleshub\infrastructure
          provider: 'azurerm'
          command: 'apply'
          commandOptions: '-var-file $(varFile)'
          environmentServiceNameAzureRM: 'AzureDevopsCon1'
        displayName: "Apply Terraform"

      # Capture Terraform output
      - script: |
          terraform output -json > $(TERRAFORM_OUTPUT_FILE)
        displayName: "Capture Terraform Output"

      # Publish Terraform output as a pipeline artifact
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(TERRAFORM_OUTPUT_FILE)
          artifactName: "terraformOutput"
